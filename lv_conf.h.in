/**
 * @file lv_conf.h
 * Configuration file for v9.2.2
 */

/*
 * Copy this file as `lv_conf.h`
 * 1. simply next to the `lvgl` folder
 * 2. or any other places and
 *    - define `LV_CONF_INCLUDE_SIMPLE`
 *    - add the path as include path
 */

/* clang-format off */
#if 1 /*Set it to "1" to enable content*/

#ifndef LV_CONF_H
#define LV_CONF_H

/*If you need to include anything here, do it inside the `__ASSEMBLY__` guard */
#if  0 && defined(__ASSEMBLY__)
#include "my_include.h"
#endif

/*====================
   COLOR SETTINGS
 *====================*/

/*Color depth: 8 (A8), 16 (RGB565), 24 (RGB888), 32 (XRGB8888)*/
#define LV_COLOR_DEPTH @BR2_LV_COLOR_DEPTH@

/*=========================
   STDLIB WRAPPER SETTINGS
 *=========================*/

/* Possible values
 * - LV_STDLIB_BUILTIN:     LVGL's built in implementation
 * - LV_STDLIB_CLIB:        Standard C functions, like malloc, strlen, etc
 * - LV_STDLIB_MICROPYTHON: MicroPython implementation
 * - LV_STDLIB_RTTHREAD:    RT-Thread implementation
 * - LV_STDLIB_CUSTOM:      Implement the functions externally
 */
#define LV_USE_STDLIB_MALLOC    @BR2_LV_USE_STDLIB_MALLOC@
#define LV_USE_STDLIB_STRING    @BR2_LV_USE_STDLIB_STRING@
#define LV_USE_STDLIB_SPRINTF   @BR2_LV_USE_STDLIB_SPRINTF@

#define LV_STDINT_INCLUDE       <stdint.h>
#define LV_STDDEF_INCLUDE       <stddef.h>
#define LV_STDBOOL_INCLUDE      <stdbool.h>
#define LV_INTTYPES_INCLUDE     <inttypes.h>
#define LV_LIMITS_INCLUDE       <limits.h>
#define LV_STDARG_INCLUDE       <stdarg.h>

#if LV_USE_STDLIB_MALLOC == LV_STDLIB_BUILTIN
    /*Size of the memory available for `lv_malloc()` in bytes (>= 2kB)*/
    #define LV_MEM_SIZE (64 * 1024U)          /*[bytes]*/

    /*Size of the memory expand for `lv_malloc()` in bytes*/
    #define LV_MEM_POOL_EXPAND_SIZE 0

    /*Set an address for the memory pool instead of allocating it as a normal array. Can be in external SRAM too.*/
    #define LV_MEM_ADR 0     /*0: unused*/
    /*Instead of an address give a memory allocator that will be called to get a memory pool for LVGL. E.g. my_malloc*/
    #if LV_MEM_ADR == 0
        #undef LV_MEM_POOL_INCLUDE
        #undef LV_MEM_POOL_ALLOC
    #endif
#endif  /*LV_USE_STDLIB_MALLOC == LV_STDLIB_BUILTIN*/

/*====================
   HAL SETTINGS
 *====================*/

/*Default display refresh, input device read and animation step period.*/
#define LV_DEF_REFR_PERIOD  @BR2_LV_DEF_REFR_PERIOD@      /*[ms]*/

/*Default Dot Per Inch. Used to initialize default sizes such as widgets sized, style paddings.
 *(Not so important, you can adjust it to modify default sizes and spaces)*/
#define LV_DPI_DEF @BR2_LV_DPI_DEF@     /*[px/inch]*/

/*=================
 * OPERATING SYSTEM
 *=================*/
/*Select an operating system to use. Possible options:
 * - LV_OS_NONE
 * - LV_OS_PTHREAD
 * - LV_OS_FREERTOS
 * - LV_OS_CMSIS_RTOS2
 * - LV_OS_RTTHREAD
 * - LV_OS_WINDOWS
 * - LV_OS_CUSTOM */
#define LV_USE_OS   @BR2_LV_USE_OS@

#if LV_USE_OS == LV_OS_CUSTOM
    #define LV_OS_CUSTOM_INCLUDE <stdint.h>
#endif
#if LV_USE_OS == LV_OS_FREERTOS
	/*
	 * Unblocking an RTOS task with a direct notification is 45% faster and uses less RAM
	 * than unblocking a task using an intermediary object such as a binary semaphore.
	 * RTOS task notifications can only be used when there is only one task that can be the recipient of the event.
	 */
	#define LV_USE_FREERTOS_TASK_NOTIFY 1
#endif

/*========================
 * RENDERING CONFIGURATION
 *========================*/

/*Align the stride of all layers and images to this bytes*/
#define LV_DRAW_BUF_STRIDE_ALIGN                @BR2_LV_DRAW_BUF_STRIDE_ALIGN@

/*Align the start address of draw_buf addresses to this bytes*/
#define LV_DRAW_BUF_ALIGN                       @BR2_LV_DRAW_BUF_ALIGN@

/*Using matrix for transformations.
 *Requirements:
    `LV_USE_MATRIX = 1`.
    The rendering engine needs to support 3x3 matrix transformations.*/
#define LV_DRAW_TRANSFORM_USE_MATRIX            @BR2_LV_DRAW_TRANSFORM_USE_MATRIX@

/* If a widget has `style_opa < 255` (not `bg_opa`, `text_opa` etc) or not NORMAL blend mode
 * it is buffered into a "simple" layer before rendering. The widget can be buffered in smaller chunks.
 * "Transformed layers" (if `transform_angle/zoom` are set) use larger buffers
 * and can't be drawn in chunks. */

/*The target buffer size for simple layer chunks.*/
#define LV_DRAW_LAYER_SIMPLE_BUF_SIZE    @BR2_LV_DRAW_LAYER_SIMPLE_BUF_SIZE@   /*[bytes]*/

/* The stack size of the drawing thread.
 * NOTE: If FreeType or ThorVG is enabled, it is recommended to set it to 32KB or more.
 */
#define LV_DRAW_THREAD_STACK_SIZE    @BR2_LV_DRAW_THREAD_STACK_SIZE@   /*[bytes]*/

#define LV_USE_DRAW_SW @BR2_LV_USE_DRAW_SW@
#if LV_USE_DRAW_SW == 1

	/*
	 * Selectively disable color format support in order to reduce code size.
	 * NOTE: some features use certain color formats internally, e.g.
	 * - gradients use RGB888
	 * - bitmaps with transparency may use ARGB8888
	 */

	#define LV_DRAW_SW_SUPPORT_RGB565		@BR2_LV_DRAW_SW_SUPPORT_RGB565@
	#define LV_DRAW_SW_SUPPORT_RGB565A8		@BR2_LV_DRAW_SW_SUPPORT_RGB565A8@
	#define LV_DRAW_SW_SUPPORT_RGB888		@BR2_LV_DRAW_SW_SUPPORT_RGB888@
	#define LV_DRAW_SW_SUPPORT_XRGB8888		@BR2_LV_DRAW_SW_SUPPORT_XRGB8888@
	#define LV_DRAW_SW_SUPPORT_ARGB8888		@BR2_LV_DRAW_SW_SUPPORT_ARGB8888@
	#define LV_DRAW_SW_SUPPORT_L8			@BR2_LV_DRAW_SW_SUPPORT_L8@
	#define LV_DRAW_SW_SUPPORT_AL88			@BR2_LV_DRAW_SW_SUPPORT_AL88@
	#define LV_DRAW_SW_SUPPORT_A8			@BR2_LV_DRAW_SW_SUPPORT_A8@
	#define LV_DRAW_SW_SUPPORT_I1			@BR2_LV_DRAW_SW_SUPPORT_I1@

    /* Set the number of draw unit.
     * > 1 requires an operating system enabled in `LV_USE_OS`
     * > 1 means multiple threads will render the screen in parallel
     * > -1 means create draw units according to the number of cpu */
    #define LV_DRAW_SW_DRAW_UNIT_CNT    @BR2_LV_DRAW_SW_DRAW_UNIT_CNT@

    /* Use Arm-2D to accelerate the sw render */
    #define LV_USE_DRAW_ARM2D_SYNC      @BR2_LV_USE_DRAW_ARM2D_SYNC@

    /* Enable native helium assembly to be compiled */
    #define LV_USE_NATIVE_HELIUM_ASM    @BR2_LV_USE_NATIVE_HELIUM_ASM@
    
    /* 0: use a simple renderer capable of drawing only simple rectangles with gradient, images, texts, and straight lines only
     * 1: use a complex renderer capable of drawing rounded corners, shadow, skew lines, and arcs too */
    #define LV_DRAW_SW_COMPLEX          @BR2_LV_DRAW_SW_COMPLEX@

    #if LV_DRAW_SW_COMPLEX == 1
        /*Allow buffering some shadow calculation.
        *LV_DRAW_SW_SHADOW_CACHE_SIZE is the max. shadow size to buffer, where shadow size is `shadow_width + radius`
        *Caching has LV_DRAW_SW_SHADOW_CACHE_SIZE^2 RAM cost*/
        #define LV_DRAW_SW_SHADOW_CACHE_SIZE @BR2_LV_DRAW_SW_SHADOW_CACHE_SIZE@

        /* Set number of maximally cached circle data.
        * The circumference of 1/4 circle are saved for anti-aliasing
        * radius * 4 bytes are used per circle (the most often used radiuses are saved)
        * 0: to disable caching */
        #define LV_DRAW_SW_CIRCLE_CACHE_SIZE @BR2_LV_DRAW_SW_CIRCLE_CACHE_SIZE@
    #endif

    #define  LV_USE_DRAW_SW_ASM     @BR2_LV_USE_DRAW_SW_ASM@

    #if LV_USE_DRAW_SW_ASM == LV_DRAW_SW_ASM_CUSTOM
        #define  LV_DRAW_SW_ASM_CUSTOM_INCLUDE @BR2_LV_DRAW_SW_ASM_CUSTOM_INCLUDE@
    #endif

    /* Enable drawing complex gradients in software: linear at an angle, radial or conical */
    #define LV_USE_DRAW_SW_COMPLEX_GRADIENTS    @BR2_LV_USE_DRAW_SW_COMPLEX_GRADIENTS@
#endif

/* Draw using cached SDL textures*/
#define LV_USE_DRAW_SDL @BR2_LV_USE_DRAW_SDL@
/*=======================
 * FEATURE CONFIGURATION
 *=======================*/

/*-------------
 * Logging
 *-----------*/

/*Enable the log module*/
#define LV_USE_LOG @BR2_LV_USE_LOG@
#if LV_USE_LOG

    /*How important log should be added:
    *LV_LOG_LEVEL_TRACE       A lot of logs to give detailed information
    *LV_LOG_LEVEL_INFO        Log important events
    *LV_LOG_LEVEL_WARN        Log if something unwanted happened but didn't cause a problem
    *LV_LOG_LEVEL_ERROR       Only critical issue, when the system may fail
    *LV_LOG_LEVEL_USER        Only logs added by the user
    *LV_LOG_LEVEL_NONE        Do not log anything*/
    #define LV_LOG_LEVEL @BR2_LV_LOG_LEVEL@

    /*1: Print the log with 'printf';
    *0: User need to register a callback with `lv_log_register_print_cb()`*/
    #define LV_LOG_PRINTF @BR2_LV_LOG_PRINTF@

    /*Set callback to print the logs.
     *E.g `my_print`. The prototype should be `void my_print(lv_log_level_t level, const char * buf)`
     *Can be overwritten by `lv_log_register_print_cb`*/
    //#define LV_LOG_PRINT_CB

    /*1: Enable print timestamp;
     *0: Disable print timestamp*/
    #define LV_LOG_USE_TIMESTAMP @BR2_LV_LOG_USE_TIMESTAMP@

    /*1: Print file and line number of the log;
     *0: Do not print file and line number of the log*/
    #define LV_LOG_USE_FILE_LINE @BR2_LV_LOG_USE_FILE_LINE@


    /*Enable/disable LV_LOG_TRACE in modules that produces a huge number of logs*/
    #define LV_LOG_TRACE_MEM        @BR2_LV_LOG_TRACE_MEM@
    #define LV_LOG_TRACE_TIMER      @BR2_LV_LOG_TRACE_TIMER@
    #define LV_LOG_TRACE_INDEV      @BR2_LV_LOG_TRACE_INDEV@
    #define LV_LOG_TRACE_DISP_REFR  @BR2_LV_LOG_TRACE_DISP_REFR@
    #define LV_LOG_TRACE_EVENT      @BR2_LV_LOG_TRACE_EVENT@
    #define LV_LOG_TRACE_OBJ_CREATE @BR2_LV_LOG_TRACE_OBJ_CREATE@
    #define LV_LOG_TRACE_LAYOUT     @BR2_LV_LOG_TRACE_LAYOUT@
    #define LV_LOG_TRACE_ANIM       @BR2_LV_LOG_TRACE_ANIM@
    #define LV_LOG_TRACE_CACHE      @BR2_LV_LOG_TRACE_CACHE@

#endif  /*LV_USE_LOG*/

/*-------------
 * Asserts
 *-----------*/

/*Enable asserts if an operation is failed or an invalid data is found.
 *If LV_USE_LOG is enabled an error message will be printed on failure*/
#define LV_USE_ASSERT_NULL          @BR2_LV_USE_ASSERT_NULL@   /*Check if the parameter is NULL. (Very fast, recommended)*/
#define LV_USE_ASSERT_MALLOC        @BR2_LV_USE_ASSERT_MALLOC@   /*Checks is the memory is successfully allocated or no. (Very fast, recommended)*/
#define LV_USE_ASSERT_STYLE         @BR2_LV_USE_ASSERT_STYLE@   /*Check if the styles are properly initialized. (Very fast, recommended)*/
#define LV_USE_ASSERT_MEM_INTEGRITY @BR2_LV_USE_ASSERT_MEM_INTEGRITY@   /*Check the integrity of `lv_mem` after critical operations. (Slow)*/
#define LV_USE_ASSERT_OBJ           @BR2_LV_USE_ASSERT_OBJ@   /*Check the object's type and existence (e.g. not deleted). (Slow)*/

/*Add a custom handler when assert happens e.g. to restart the MCU*/
#define LV_ASSERT_HANDLER_INCLUDE @BR2_LV_ASSERT_HANDLER_INCLUDE@
#define LV_ASSERT_HANDLER assert(0);   /*Halt by default*/

/*-------------
 * Debug
 *-----------*/

/*1: Draw random colored rectangles over the redrawn areas*/
#define LV_USE_REFR_DEBUG @BR2_LV_USE_REFR_DEBUG@

/*1: Draw a red overlay for ARGB layers and a green overlay for RGB layers*/
#define LV_USE_LAYER_DEBUG @BR2_LV_USE_LAYER_DEBUG@

/*1: Draw overlays with different colors for each draw_unit's tasks.
 *Also add the index number of the draw unit on white background.
 *For layers add the index number of the draw unit on black background.*/
#define LV_USE_PARALLEL_DRAW_DEBUG @BR2_LV_USE_PARALLEL_DRAW_DEBUG@

/*-------------
 * Others
 *-----------*/

#define LV_ENABLE_GLOBAL_CUSTOM @BR2_LV_ENABLE_GLOBAL_CUSTOM@
#if LV_ENABLE_GLOBAL_CUSTOM
    /*Header to include for the custom 'lv_global' function"*/
    #define LV_GLOBAL_CUSTOM_INCLUDE @BR2_LV_GLOBAL_CUSTOM_INCLUDE@
#endif

/*Default cache size in bytes.
 *Used by image decoders such as `lv_lodepng` to keep the decoded image in the memory.
 *If size is not set to 0, the decoder will fail to decode when the cache is full.
 *If size is 0, the cache function is not enabled and the decoded mem will be released immediately after use.*/
#define LV_CACHE_DEF_SIZE       @BR2_LV_CACHE_DEF_SIZE@

/*Default number of image header cache entries. The cache is used to store the headers of images
 *The main logic is like `LV_CACHE_DEF_SIZE` but for image headers.*/
#define LV_IMAGE_HEADER_CACHE_DEF_CNT @BR2_LV_IMAGE_HEADER_CACHE_DEF_CNT@

/*Number of stops allowed per gradient. Increase this to allow more stops.
 *This adds (sizeof(lv_color_t) + 1) bytes per additional stop*/
#define LV_GRADIENT_MAX_STOPS   @BR2_LV_GRADIENT_MAX_STOPS@

/* Adjust color mix functions rounding. GPUs might calculate color mix (blending) differently.
 * 0: round down, 64: round up from x.75, 128: round up from half, 192: round up from x.25, 254: round up */
#define LV_COLOR_MIX_ROUND_OFS  @BR2_LV_COLOR_MIX_ROUND_OFS@

/* Add 2 x 32 bit variables to each lv_obj_t to speed up getting style properties */
#define LV_OBJ_STYLE_CACHE      @BR2_LV_OBJ_STYLE_CACHE@

/* Add `id` field to `lv_obj_t` */
#define LV_USE_OBJ_ID           @BR2_LV_USE_OBJ_ID@

/* Automatically assign an ID when obj is created */
#define LV_OBJ_ID_AUTO_ASSIGN   LV_USE_OBJ_ID

/*Use the builtin obj ID handler functions:
* - lv_obj_assign_id:       Called when a widget is created. Use a separate counter for each widget class as an ID.
* - lv_obj_id_compare:      Compare the ID to decide if it matches with a requested value.
* - lv_obj_stringify_id:    Return e.g. "button3"
* - lv_obj_free_id:         Does nothing, as there is no memory allocation  for the ID.
* When disabled these functions needs to be implemented by the user.*/
#define LV_USE_OBJ_ID_BUILTIN   @BR2_LV_USE_OBJ_ID_BUILTIN@

/*Use obj property set/get API*/
#define LV_USE_OBJ_PROPERTY @BR2_LV_USE_OBJ_PROPERTY@

/*Enable property name support*/
#define LV_USE_OBJ_PROPERTY_NAME @BR2_LV_USE_OBJ_PROPERTY_NAME@

/*=====================
 *  COMPILER SETTINGS
 *====================*/

/*For big endian systems set to 1*/
#define LV_BIG_ENDIAN_SYSTEM @BR2_LV_BIG_ENDIAN_SYSTEM@

/*Define a custom attribute to `lv_tick_inc` function*/
#define LV_ATTRIBUTE_TICK_INC

/*Define a custom attribute to `lv_timer_handler` function*/
#define LV_ATTRIBUTE_TIMER_HANDLER

/*Define a custom attribute to `lv_display_flush_ready` function*/
#define LV_ATTRIBUTE_FLUSH_READY

/*Required alignment size for buffers*/
#define LV_ATTRIBUTE_MEM_ALIGN_SIZE @BR2_LV_ATTRIBUTE_MEM_ALIGN_SIZE@

/*Will be added where memories needs to be aligned (with -Os data might not be aligned to boundary by default).
 * E.g. __attribute__((aligned(4)))*/
#define LV_ATTRIBUTE_MEM_ALIGN

/*Attribute to mark large constant arrays for example font's bitmaps*/
#define LV_ATTRIBUTE_LARGE_CONST

/*Compiler prefix for a big array declaration in RAM*/
#define LV_ATTRIBUTE_LARGE_RAM_ARRAY

/*Place performance critical functions into a faster memory (e.g RAM)*/
#define LV_ATTRIBUTE_FAST_MEM

/*Export integer constant to binding. This macro is used with constants in the form of LV_<CONST> that
 *should also appear on LVGL binding API such as MicroPython.*/
#define LV_EXPORT_CONST_INT(int_value) struct _silence_gcc_warning /*The default value just prevents GCC warning*/

/*Prefix all global extern data with this*/
#define LV_ATTRIBUTE_EXTERN_DATA

/* Use `float` as `lv_value_precise_t` */
#define LV_USE_FLOAT            @BR2_LV_USE_FLOAT@

/*Enable matrix support
 *Requires `LV_USE_FLOAT = 1`*/
#define LV_USE_MATRIX           @BR2_LV_USE_MATRIX@

/*Include `lvgl_private.h` in `lvgl.h` to access internal data and functions by default*/
#define LV_USE_PRIVATE_API		@BR2_LV_USE_PRIVATE_API@

/*==================
 *   FONT USAGE
 *===================*/

/*Montserrat fonts with ASCII range and some symbols using bpp = 4
 *https://fonts.google.com/specimen/Montserrat*/
#define LV_FONT_MONTSERRAT_8  @BR2_LV_FONT_MONTSERRAT_8@
#define LV_FONT_MONTSERRAT_10 @BR2_LV_FONT_MONTSERRAT_10@
#define LV_FONT_MONTSERRAT_12 @BR2_LV_FONT_MONTSERRAT_12@
#define LV_FONT_MONTSERRAT_14 @BR2_LV_FONT_MONTSERRAT_14@
#define LV_FONT_MONTSERRAT_16 @BR2_LV_FONT_MONTSERRAT_16@
#define LV_FONT_MONTSERRAT_18 @BR2_LV_FONT_MONTSERRAT_18@
#define LV_FONT_MONTSERRAT_20 @BR2_LV_FONT_MONTSERRAT_20@
#define LV_FONT_MONTSERRAT_22 @BR2_LV_FONT_MONTSERRAT_22@
#define LV_FONT_MONTSERRAT_24 @BR2_LV_FONT_MONTSERRAT_24@
#define LV_FONT_MONTSERRAT_26 @BR2_LV_FONT_MONTSERRAT_26@
#define LV_FONT_MONTSERRAT_28 @BR2_LV_FONT_MONTSERRAT_28@
#define LV_FONT_MONTSERRAT_30 @BR2_LV_FONT_MONTSERRAT_30@
#define LV_FONT_MONTSERRAT_32 @BR2_LV_FONT_MONTSERRAT_32@
#define LV_FONT_MONTSERRAT_34 @BR2_LV_FONT_MONTSERRAT_34@
#define LV_FONT_MONTSERRAT_36 @BR2_LV_FONT_MONTSERRAT_36@
#define LV_FONT_MONTSERRAT_38 @BR2_LV_FONT_MONTSERRAT_38@
#define LV_FONT_MONTSERRAT_40 @BR2_LV_FONT_MONTSERRAT_40@
#define LV_FONT_MONTSERRAT_42 @BR2_LV_FONT_MONTSERRAT_42@
#define LV_FONT_MONTSERRAT_44 @BR2_LV_FONT_MONTSERRAT_44@
#define LV_FONT_MONTSERRAT_46 @BR2_LV_FONT_MONTSERRAT_46@
#define LV_FONT_MONTSERRAT_48 @BR2_LV_FONT_MONTSERRAT_48@

/*Demonstrate special features*/
#define LV_FONT_MONTSERRAT_28_COMPRESSED @BR2_LV_FONT_MONTSERRAT_28_COMPRESSED@  /*bpp = 3*/
#define LV_FONT_DEJAVU_16_PERSIAN_HEBREW @BR2_LV_FONT_DEJAVU_16_PERSIAN_HEBREW@  /*Hebrew, Arabic, Persian letters and all their forms*/
#define LV_FONT_SIMSUN_14_CJK            @BR2_LV_FONT_SIMSUN_14_CJK@  /*1000 most common CJK radicals*/
#define LV_FONT_SIMSUN_16_CJK            @BR2_LV_FONT_SIMSUN_16_CJK@  /*1000 most common CJK radicals*/

/*Pixel perfect monospace fonts*/
#define LV_FONT_UNSCII_8  @BR2_LV_FONT_UNSCII_8@
#define LV_FONT_UNSCII_16 @BR2_LV_FONT_UNSCII_16@

/*Optionally declare custom fonts here.
 *You can use these fonts as default font too and they will be available globally.
 *E.g. #define LV_FONT_CUSTOM_DECLARE   LV_FONT_DECLARE(my_font_1) LV_FONT_DECLARE(my_font_2)*/
#define LV_FONT_CUSTOM_DECLARE

/*Always set a default font*/
//#define LV_FONT_DEFAULT &lv_font_montserrat_14
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_8  @BR2_LV_FONT_DEFAULT_MONTSERRAT_8@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_10 @BR2_LV_FONT_DEFAULT_MONTSERRAT_10@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_12 @BR2_LV_FONT_DEFAULT_MONTSERRAT_12@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_14 @BR2_LV_FONT_DEFAULT_MONTSERRAT_14@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_16 @BR2_LV_FONT_DEFAULT_MONTSERRAT_16@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_18 @BR2_LV_FONT_DEFAULT_MONTSERRAT_18@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_20 @BR2_LV_FONT_DEFAULT_MONTSERRAT_20@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_22 @BR2_LV_FONT_DEFAULT_MONTSERRAT_22@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_24 @BR2_LV_FONT_DEFAULT_MONTSERRAT_24@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_26 @BR2_LV_FONT_DEFAULT_MONTSERRAT_26@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_28 @BR2_LV_FONT_DEFAULT_MONTSERRAT_28@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_30 @BR2_LV_FONT_DEFAULT_MONTSERRAT_30@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_32 @BR2_LV_FONT_DEFAULT_MONTSERRAT_32@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_34 @BR2_LV_FONT_DEFAULT_MONTSERRAT_34@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_36 @BR2_LV_FONT_DEFAULT_MONTSERRAT_36@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_38 @BR2_LV_FONT_DEFAULT_MONTSERRAT_38@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_40 @BR2_LV_FONT_DEFAULT_MONTSERRAT_40@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_42 @BR2_LV_FONT_DEFAULT_MONTSERRAT_42@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_44 @BR2_LV_FONT_DEFAULT_MONTSERRAT_44@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_46 @BR2_LV_FONT_DEFAULT_MONTSERRAT_46@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_48 @BR2_LV_FONT_DEFAULT_MONTSERRAT_48@
#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_48 @BR2_LV_FONT_DEFAULT_MONTSERRAT_48@

#define CONFIG_LV_FONT_DEFAULT_MONTSERRAT_28_COMPRESSED @BR2_LV_FONT_DEFAULT_MONTSERRAT_28_COMPRESSED@
#define CONFIG_LV_FONT_DEFAULT_DEJAVU_16_PERSIAN_HEBREW @BR2_LV_FONT_DEFAULT_DEJAVU_16_PERSIAN_HEBREW@
#define CONFIG_LV_FONT_DEFAULT_SIMSUN_14_CJK            @BR2_LV_FONT_DEFAULT_SIMSUN_14_CJK@
#define CONFIG_LV_FONT_DEFAULT_SIMSUN_16_CJK            @BR2_LV_FONT_DEFAULT_SIMSUN_16_CJK@

#define CONFIG_LV_FONT_DEFAULT_UNSCII_8  @BR2_LV_FONT_DEFAULT_UNSCII_8@
#define CONFIG_LV_FONT_DEFAULT_UNSCII_16 @BR2_LV_FONT_DEFAULT_UNSCII_16@

/*Enable handling large font and/or fonts with a lot of characters.
 *The limit depends on the font size, font face and bpp.
 *Compiler error will be triggered if a font needs it.*/
#define LV_FONT_FMT_TXT_LARGE @BR2_LV_FONT_FMT_TXT_LARGE@

/*Enables/disables support for compressed fonts.*/
#define LV_USE_FONT_COMPRESSED @BR2_LV_USE_FONT_COMPRESSED@

/*Enable drawing placeholders when glyph dsc is not found*/
#define LV_USE_FONT_PLACEHOLDER @BR2_LV_USE_FONT_PLACEHOLDER@

/*=================
 *  TEXT SETTINGS
 *=================*/

/**
 * Select a character encoding for strings.
 * Your IDE or editor should have the same character encoding
 * - LV_TXT_ENC_UTF8
 * - LV_TXT_ENC_ASCII
 */
#define LV_TXT_ENC @BR2_LV_TXT_ENC@

/*Can break (wrap) texts on these chars*/
#define LV_TXT_BREAK_CHARS @BR2_LV_TXT_BREAK_CHARS@

/*If a word is at least this long, will break wherever "prettiest"
 *To disable, set to a value <= 0*/
#define LV_TXT_LINE_BREAK_LONG_LEN @BR2_LV_TXT_LINE_BREAK_LONG_LEN@

/*Minimum number of characters in a long word to put on a line before a break.
 *Depends on LV_TXT_LINE_BREAK_LONG_LEN.*/
#define LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN @BR2_LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN@

/*Minimum number of characters in a long word to put on a line after a break.
 *Depends on LV_TXT_LINE_BREAK_LONG_LEN.*/
#define LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN @BR2_LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN@

/*Support bidirectional texts. Allows mixing Left-to-Right and Right-to-Left texts.
 *The direction will be processed according to the Unicode Bidirectional Algorithm:
 *https://www.w3.org/International/articles/inline-bidi-markup/uba-basics*/
#define LV_USE_BIDI @BR2_LV_USE_BIDI@
#if LV_USE_BIDI
    /*Set the default direction. Supported values:
    *`LV_BASE_DIR_LTR` Left-to-Right
    *`LV_BASE_DIR_RTL` Right-to-Left
    *`LV_BASE_DIR_AUTO` detect texts base direction*/
    #define LV_BIDI_BASE_DIR_DEF @BR2_LV_BIDI_BASE_DIR_DEF@
#endif

/*Enable Arabic/Persian processing
 *In these languages characters should be replaced with an other form based on their position in the text*/
#define LV_USE_ARABIC_PERSIAN_CHARS @BR2_LV_USE_ARABIC_PERSIAN_CHARS@

/*==================
 * WIDGETS
 *================*/

/*Documentation of the widgets: https://docs.lvgl.io/latest/en/html/widgets/index.html*/

#define LV_WIDGETS_HAS_DEFAULT_VALUE  @BR2_LV_WIDGETS_HAS_DEFAULT_VALUE@

#define LV_USE_ANIMIMG    @BR2_LV_USE_ANIMIMG@

#define LV_USE_ARC        @BR2_LV_USE_ARC@

#define LV_USE_BAR        @BR2_LV_USE_BAR@

#define LV_USE_BUTTON        @BR2_LV_USE_BUTTON@

#define LV_USE_BUTTONMATRIX  @BR2_LV_USE_BUTTONMATRIX@

#define LV_USE_CALENDAR   @BR2_LV_USE_CALENDAR@
#if LV_USE_CALENDAR
    #define LV_CALENDAR_WEEK_STARTS_MONDAY @BR2_LV_CALENDAR_WEEK_STARTS_MONDAY@
    #if LV_CALENDAR_WEEK_STARTS_MONDAY
        #define LV_CALENDAR_DEFAULT_DAY_NAMES {"Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"}
    #else
        #define LV_CALENDAR_DEFAULT_DAY_NAMES {"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}
    #endif

    #define LV_CALENDAR_DEFAULT_MONTH_NAMES {"January", "February", "March",  "April", "May",  "June", "July", "August", "September", "October", "November", "December"}
    #define LV_USE_CALENDAR_HEADER_ARROW @BR2_LV_USE_CALENDAR_HEADER_ARROW@
    #define LV_USE_CALENDAR_HEADER_DROPDOWN @BR2_LV_USE_CALENDAR_HEADER_DROPDOWN@
	#define LV_USE_CALENDAR_CHINESE @BR2_LV_USE_CALENDAR_CHINESE@
#endif  /*LV_USE_CALENDAR*/

#define LV_USE_CANVAS     @BR2_LV_USE_CANVAS@

#define LV_USE_CHART      @BR2_LV_USE_CHART@

#define LV_USE_CHECKBOX   @BR2_LV_USE_CHECKBOX@

#define LV_USE_DROPDOWN   @BR2_LV_USE_DROPDOWN@   /*Requires: lv_label*/

#define LV_USE_IMAGE      @BR2_LV_USE_IMAGE@   /*Requires: lv_label*/

#define LV_USE_IMAGEBUTTON     @BR2_LV_USE_IMAGEBUTTON@

#define LV_USE_KEYBOARD   @BR2_LV_USE_KEYBOARD@

#define LV_USE_LABEL      @BR2_LV_USE_LABEL@
#if LV_USE_LABEL
    #define LV_LABEL_TEXT_SELECTION @BR2_LV_LABEL_TEXT_SELECTION@ /*Enable selecting text of the label*/
    #define LV_LABEL_LONG_TXT_HINT @BR2_LV_LABEL_LONG_TXT_HINT@  /*Store some extra info in labels to speed up drawing of very long texts*/
    #define LV_LABEL_WAIT_CHAR_COUNT @BR2_LV_LABEL_WAIT_CHAR_COUNT@  /*The count of wait chart*/
#endif

#define LV_USE_LED        @BR2_LV_USE_LED@

#define LV_USE_LINE       @BR2_LV_USE_LINE@

#define LV_USE_LIST       @BR2_LV_USE_LIST@

#define LV_USE_LOTTIE     @BR2_LV_USE_LOTTIE@  /*Requires: lv_canvas, thorvg */

#define LV_USE_MENU       @BR2_LV_USE_MENU@

#define LV_USE_MSGBOX     @BR2_LV_USE_MSGBOX@

#define LV_USE_ROLLER     @BR2_LV_USE_ROLLER@   /*Requires: lv_label*/

#define LV_USE_SCALE      @BR2_LV_USE_SCALE@

#define LV_USE_SLIDER     @BR2_LV_USE_SLIDER@   /*Requires: lv_bar*/

#define LV_USE_SPAN       @BR2_LV_USE_SPAN@
#if LV_USE_SPAN
    /*A line text can contain maximum num of span descriptor */
    #define LV_SPAN_SNIPPET_STACK_SIZE @BR2_LV_SPAN_SNIPPET_STACK_SIZE@
#endif

#define LV_USE_SPINBOX    @BR2_LV_USE_SPINBOX@

#define LV_USE_SPINNER    @BR2_LV_USE_SPINNER@

#define LV_USE_SWITCH     @BR2_LV_USE_SWITCH@

#define LV_USE_TEXTAREA   @BR2_LV_USE_TEXTAREA@   /*Requires: lv_label*/
#if LV_USE_TEXTAREA != 0
    #define LV_TEXTAREA_DEF_PWD_SHOW_TIME @BR2_LV_TEXTAREA_DEF_PWD_SHOW_TIME@    /*ms*/
#endif

#define LV_USE_TABLE      @BR2_LV_USE_TABLE@

#define LV_USE_TABVIEW    @BR2_LV_USE_TABVIEW@

#define LV_USE_TILEVIEW   @BR2_LV_USE_TILEVIEW@

#define LV_USE_WIN        @BR2_LV_USE_WIN@

/*==================
 * THEMES
 *==================*/

/*A simple, impressive and very complete theme*/
#define LV_USE_THEME_DEFAULT @BR2_LV_USE_THEME_DEFAULT@
#if LV_USE_THEME_DEFAULT

    /*0: Light mode; 1: Dark mode*/
    #define LV_THEME_DEFAULT_DARK @BR2_LV_THEME_DEFAULT_DARK@

    /*1: Enable grow on press*/
    #define LV_THEME_DEFAULT_GROW @BR2_LV_THEME_DEFAULT_GROW@

    /*Default transition time in [ms]*/
    #define LV_THEME_DEFAULT_TRANSITION_TIME @BR2_LV_THEME_DEFAULT_TRANSITION_TIME@
#endif /*LV_USE_THEME_DEFAULT*/

/*A very simple theme that is a good starting point for a custom theme*/
#define LV_USE_THEME_SIMPLE @BR2_LV_USE_THEME_SIMPLE@

/*A theme designed for monochrome displays*/
#define LV_USE_THEME_MONO @BR2_LV_USE_THEME_MONO@

/*==================
 * LAYOUTS
 *==================*/

/*A layout similar to Flexbox in CSS.*/
#define LV_USE_FLEX @BR2_LV_USE_FLEX@

/*A layout similar to Grid in CSS.*/
#define LV_USE_GRID @BR2_LV_USE_GRID@

/*====================
 * 3RD PARTS LIBRARIES
 *====================*/

/*File system interfaces for common APIs */

/*Setting a default driver letter allows skipping the driver prefix in filepaths*/
#define LV_FS_DEFAULT_DRIVE_LETTER @BR2_LV_FS_DEFAULT_DRIVE_LETTER@

/*API for fopen, fread, etc*/
#define LV_USE_FS_STDIO @BR2_LV_USE_FS_STDIO@
#if LV_USE_FS_STDIO
    #define LV_FS_STDIO_LETTER @BR2_LV_FS_STDIO_LETTER@     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
    #define LV_FS_STDIO_PATH @BR2_LV_FS_STDIO_PATH@         /*Set the working directory. File/directory paths will be appended to it.*/
    #define LV_FS_STDIO_CACHE_SIZE @BR2_LV_FS_STDIO_CACHE_SIZE@    /*>0 to cache this number of bytes in lv_fs_read()*/
#endif

/*API for open, read, etc*/
#define LV_USE_FS_POSIX @BR2_LV_USE_FS_POSIX@
#if LV_USE_FS_POSIX
    #define LV_FS_POSIX_LETTER @BR2_LV_FS_POSIX_LETTER@     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
    #define LV_FS_POSIX_PATH @BR2_LV_FS_POSIX_PATH@         /*Set the working directory. File/directory paths will be appended to it.*/
    #define LV_FS_POSIX_CACHE_SIZE @BR2_LV_FS_POSIX_CACHE_SIZE@    /*>0 to cache this number of bytes in lv_fs_read()*/
#endif

/*API for CreateFile, ReadFile, etc*/
#define LV_USE_FS_WIN32 @BR2_LV_USE_FS_WIN32@
#if LV_USE_FS_WIN32
    #define LV_FS_WIN32_LETTER @BR2_LV_FS_WIN32_LETTER@     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
    #define LV_FS_WIN32_PATH @BR2_LV_FS_WIN32_PATH@         /*Set the working directory. File/directory paths will be appended to it.*/
    #define LV_FS_WIN32_CACHE_SIZE @BR2_LV_FS_WIN32_CACHE_SIZE@    /*>0 to cache this number of bytes in lv_fs_read()*/
#endif

/*API for FATFS (needs to be added separately). Uses f_open, f_read, etc*/
#define LV_USE_FS_FATFS @BR2_LV_USE_FS_FATFS@
#if LV_USE_FS_FATFS
    #define LV_FS_FATFS_LETTER @BR2_LV_FS_FATFS_LETTER@     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
    #define LV_FS_FATFS_CACHE_SIZE @BR2_LV_FS_FATFS_CACHE_SIZE@    /*>0 to cache this number of bytes in lv_fs_read()*/
#endif

/*API for memory-mapped file access. */
#define LV_USE_FS_MEMFS @BR2_LV_USE_FS_MEMFS@
#if LV_USE_FS_MEMFS
    #define LV_FS_MEMFS_LETTER @BR2_LV_FS_MEMFS_LETTER@     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
#endif

/*API for LittleFs. */
#define LV_USE_FS_LITTLEFS @BR2_LV_USE_FS_LITTLEFS@
#if LV_USE_FS_LITTLEFS
    #define LV_FS_LITTLEFS_LETTER @BR2_LV_FS_LITTLEFS_LETTER@     /*Set an upper cased letter on which the drive will accessible (e.g. 'A')*/
#endif

/*LODEPNG decoder library*/
#define LV_USE_LODEPNG @BR2_LV_USE_LODEPNG@

/*PNG decoder(libpng) library*/
#define LV_USE_LIBPNG @BR2_LV_USE_LIBPNG@

/*BMP decoder library*/
#define LV_USE_BMP @BR2_LV_USE_BMP@

/* JPG + split JPG decoder library.
 * Split JPG is a custom format optimized for embedded systems. */
#define LV_USE_TJPGD @BR2_LV_USE_TJPGD@

/* libjpeg-turbo decoder library.
 * Supports complete JPEG specifications and high-performance JPEG decoding. */
#define LV_USE_LIBJPEG_TURBO @BR2_LV_USE_LIBJPEG_TURBO@

/*GIF decoder library*/
#define LV_USE_GIF @BR2_LV_USE_GIF@
#if LV_USE_GIF
/*GIF decoder accelerate*/
#define LV_GIF_CACHE_DECODE_DATA @BR2_LV_GIF_CACHE_DECODE_DATA@
#endif


/*Decode bin images to RAM*/
#define LV_BIN_DECODER_RAM_LOAD @BR2_LV_BIN_DECODER_RAM_LOAD@

/*RLE decompress library*/
#define LV_USE_RLE @BR2_LV_USE_RLE@

/*QR code library*/
#define LV_USE_QRCODE @BR2_LV_USE_QRCODE@

/*Barcode code library*/
#define LV_USE_BARCODE @BR2_LV_USE_BARCODE@

/*FreeType library*/
#define LV_USE_FREETYPE @BR2_LV_USE_FREETYPE@
#if LV_USE_FREETYPE
    /*Let FreeType to use LVGL memory and file porting*/
    #define LV_FREETYPE_USE_LVGL_PORT @BR2_LV_FREETYPE_USE_LVGL_PORT@

    /*Cache count of the glyphs in FreeType. It means the number of glyphs that can be cached.
     *The higher the value, the more memory will be used.*/
    #define LV_FREETYPE_CACHE_FT_GLYPH_CNT @BR2_LV_FREETYPE_CACHE_FT_GLYPH_CNT@
#endif

/* Built-in TTF decoder */
#define LV_USE_TINY_TTF @BR2_LV_USE_TINY_TTF@
#if LV_USE_TINY_TTF
    /* Enable loading TTF data from files */
    #define LV_TINY_TTF_FILE_SUPPORT @BR2_LV_TINY_TTF_FILE_SUPPORT@
#endif

/*Rlottie library*/
#define LV_USE_RLOTTIE @BR2_LV_USE_RLOTTIE@

/*Enable Vector Graphic APIs
 *Requires `LV_USE_MATRIX = 1`*/
#define LV_USE_VECTOR_GRAPHIC  @BR2_LV_USE_VECTOR_GRAPHIC@

/* Enable ThorVG (vector graphics library) from the src/libs folder */
#define LV_USE_THORVG_INTERNAL @BR2_LV_USE_THORVG_INTERNAL@

/* Enable ThorVG by assuming that its installed and linked to the project */
#define LV_USE_THORVG_EXTERNAL @BR2_LV_USE_THORVG_EXTERNAL@

/*Use lvgl built-in LZ4 lib*/
#define LV_USE_LZ4_INTERNAL  @BR2_LV_USE_LZ4_INTERNAL@

/*Use external LZ4 library*/
#define LV_USE_LZ4_EXTERNAL  @BR2_LV_USE_LZ4_EXTERNAL@

/*==================
 * OTHERS
 *==================*/

/*1: Enable API to take snapshot for object*/
#define LV_USE_SNAPSHOT @BR2_LV_USE_SNAPSHOT@

/*1: Enable system monitor component*/
#define LV_USE_SYSMON   @BR2_LV_USE_SYSMON@
#if LV_USE_SYSMON
    /*Get the idle percentage. E.g. uint32_t my_get_idle(void);*/
    #define LV_SYSMON_GET_IDLE lv_timer_get_idle

    /*1: Show CPU usage and FPS count
     * Requires `LV_USE_SYSMON = 1`*/
    #define LV_USE_PERF_MONITOR @BR2_LV_USE_PERF_MONITOR@
    #if LV_USE_PERF_MONITOR
        #define LV_USE_PERF_MONITOR_POS @BR2_LV_USE_PERF_MONITOR_POS@

        /*0: Displays performance data on the screen, 1: Prints performance data using log.*/
        #define LV_USE_PERF_MONITOR_LOG_MODE @BR2_LV_USE_PERF_MONITOR_LOG_MODE@
    #endif

    /*1: Show the used memory and the memory fragmentation
     * Requires `LV_USE_STDLIB_MALLOC = LV_STDLIB_BUILTIN`
     * Requires `LV_USE_SYSMON = 1`*/
    #define LV_USE_MEM_MONITOR @BR2_LV_USE_MEM_MONITOR@
    #if LV_USE_MEM_MONITOR
        #define LV_USE_MEM_MONITOR_POS @BR2_LV_USE_MEM_MONITOR_POS@
    #endif

#endif /*LV_USE_SYSMON*/

/*1: Enable the runtime performance profiler*/
#define LV_USE_PROFILER @BR2_LV_USE_PROFILER@
#if LV_USE_PROFILER
    /*1: Enable the built-in profiler*/
    #define LV_USE_PROFILER_BUILTIN @BR2_LV_USE_PROFILER_BUILTIN@
    #if LV_USE_PROFILER_BUILTIN
        /*Default profiler trace buffer size*/
        #define LV_PROFILER_BUILTIN_BUF_SIZE @BR2_LV_PROFILER_BUILTIN_BUF_SIZE@     /*[bytes]*/
    #endif

    /*Header to include for the profiler*/
    #define LV_PROFILER_INCLUDE @BR2_LV_PROFILER_INCLUDE@

    /*Profiler start point function*/
    #define LV_PROFILER_BEGIN    LV_PROFILER_BUILTIN_BEGIN

    /*Profiler end point function*/
    #define LV_PROFILER_END      LV_PROFILER_BUILTIN_END

    /*Profiler start point function with custom tag*/
    #define LV_PROFILER_BEGIN_TAG LV_PROFILER_BUILTIN_BEGIN_TAG

    /*Profiler end point function with custom tag*/
    #define LV_PROFILER_END_TAG   LV_PROFILER_BUILTIN_END_TAG
#endif

/*1: Enable Monkey test*/
#define LV_USE_MONKEY @BR2_LV_USE_MONKEY@

/*1: Enable grid navigation*/
#define LV_USE_GRIDNAV @BR2_LV_USE_GRIDNAV@

/*1: Enable lv_obj fragment*/
#define LV_USE_FRAGMENT @BR2_LV_USE_FRAGMENT@

/*1: Support using images as font in label or span widgets */
#define LV_USE_IMGFONT @BR2_LV_USE_IMGFONT@

/*1: Enable an observer pattern implementation*/
#define LV_USE_OBSERVER @BR2_LV_USE_OBSERVER@

/*1: Enable Pinyin input method*/
/*Requires: lv_keyboard*/
#define LV_USE_IME_PINYIN @BR2_LV_USE_IME_PINYIN@
#if LV_USE_IME_PINYIN
    /*1: Use default thesaurus*/
    /*If you do not use the default thesaurus, be sure to use `lv_ime_pinyin` after setting the thesauruss*/
    #define LV_IME_PINYIN_USE_DEFAULT_DICT @BR2_LV_IME_PINYIN_USE_DEFAULT_DICT@
    /*Set the maximum number of candidate panels that can be displayed*/
    /*This needs to be adjusted according to the size of the screen*/
    #define LV_IME_PINYIN_CAND_TEXT_NUM @BR2_LV_IME_PINYIN_CAND_TEXT_NUM@

    /*Use 9 key input(k9)*/
    #define LV_IME_PINYIN_USE_K9_MODE      @BR2_LV_IME_PINYIN_USE_K9_MODE@
    #if LV_IME_PINYIN_USE_K9_MODE == 1
        #define LV_IME_PINYIN_K9_CAND_TEXT_NUM @BR2_LV_IME_PINYIN_K9_CAND_TEXT_NUM@
    #endif /*LV_IME_PINYIN_USE_K9_MODE*/
#endif

/*1: Enable file explorer*/
/*Requires: lv_table*/
#define LV_USE_FILE_EXPLORER                     @BR2_LV_USE_FILE_EXPLORER@
#if LV_USE_FILE_EXPLORER
    /*Maximum length of path*/
    #define LV_FILE_EXPLORER_PATH_MAX_LEN        @BR2_LV_FILE_EXPLORER_PATH_MAX_LEN@
    /*Quick access bar, 1:use, 0:not use*/
    /*Requires: lv_list*/
    #define LV_FILE_EXPLORER_QUICK_ACCESS        @BR2_LV_FILE_EXPLORER_QUICK_ACCESS@
#endif

/*==================
 * DEVICES
 *==================*/

/*Use SDL to open window on PC and handle mouse and keyboard*/
#define LV_USE_SDL              @BR2_LV_USE_SDL@
#if LV_USE_SDL
    #define LV_SDL_INCLUDE_PATH     @BR2_LV_SDL_INCLUDE_PATH@
    #define LV_SDL_RENDER_MODE      @BR2_LV_SDL_RENDER_MODE@   /*LV_DISPLAY_RENDER_MODE_DIRECT is recommended for best performance*/
    #define LV_SDL_BUF_COUNT        @BR2_LV_SDL_BUFFER_COUNT@    /*1 or 2*/
	#define LV_SDL_ACCELERATED      @BR2_LV_SDL_ACCELERATED@
    #define LV_SDL_FULLSCREEN       @BR2_LV_SDL_FULLSCREEN@    /*1: Make the window full screen by default*/
    #define LV_SDL_DIRECT_EXIT      @BR2_LV_SDL_DIRECT_EXIT@    /*1: Exit the application when all SDL windows are closed*/
    #define LV_SDL_MOUSEWHEEL_MODE  LV_SDL_MOUSEWHEEL_MODE_ENCODER  /*LV_SDL_MOUSEWHEEL_MODE_ENCODER/CROWN*/
#endif

/*Use X11 to open window on Linux desktop and handle mouse and keyboard*/
#define LV_USE_X11              @BR2_LV_USE_X11@
#if LV_USE_X11
    #define LV_X11_DIRECT_EXIT         @BR2_LV_X11_DIRECT_EXIT@  /*Exit the application when all X11 windows have been closed*/
    #define LV_X11_DOUBLE_BUFFER       @BR2_LV_X11_DOUBLE_BUFFER@  /*Use double buffers for endering*/
    /*select only 1 of the following render modes (LV_X11_RENDER_MODE_PARTIAL preferred!)*/
    #define LV_X11_RENDER_MODE_PARTIAL @BR2_LV_X11_RENDER_MODE_PARTIAL@  /*Partial render mode (preferred)*/
    #define LV_X11_RENDER_MODE_DIRECT  @BR2_LV_X11_RENDER_MODE_DIRECT@  /*direct render mode*/
    #define LV_X11_RENDER_MODE_FULL    @BR2_LV_X11_RENDER_MODE_FULL@  /*Full render mode*/
#endif

/*Use Wayland to open a window and handle input on Linux or BSD desktops */
#define LV_USE_WAYLAND          @BR2_LV_USE_WAYLAND@
#if LV_USE_WAYLAND
    #define LV_WAYLAND_WINDOW_DECORATIONS   @BR2_LV_WAYLAND_WINDOW_DECORATIONS@    /*Draw client side window decorations only necessary on Mutter/GNOME*/
    #define LV_WAYLAND_WL_SHELL             @BR2_LV_WAYLAND_WL_SHELL@    /*Use the legacy wl_shell protocol instead of the default XDG shell*/
#endif

/*Driver for /dev/fb*/
#define LV_USE_LINUX_FBDEV      @BR2_LV_USE_LINUX_FBDEV@
#if LV_USE_LINUX_FBDEV
    #define LV_LINUX_FBDEV_BSD           @BR2_LV_LINUX_FBDEV_BSD@
    #define LV_LINUX_FBDEV_RENDER_MODE   LV_DISPLAY_RENDER_MODE_PARTIAL
    #define LV_LINUX_FBDEV_BUFFER_COUNT  @BR2_LV_LINUX_FBDEV_BUFFER_COUNT@
    #define LV_LINUX_FBDEV_BUFFER_SIZE   @BR2_LV_LINUX_FBDEV_BUFFER_SIZE@
#endif

/*Driver for /dev/dri/card*/
#define LV_USE_LINUX_DRM        @BR2_LV_USE_LINUX_DRM@
#define LV_DRM_USE_RGA          @BR2_LV_DRM_USE_RGA@

/*Interface for TFT_eSPI*/
#define LV_USE_TFT_ESPI         @BR2_LV_USE_TFT_ESPI@

/*Driver for evdev input devices*/
#define LV_USE_EVDEV    @BR2_LV_USE_EVDEV@

/*Driver for libinput input devices*/
#define LV_USE_LIBINPUT    @BR2_LV_USE_LIBINPUT@

#if LV_USE_LIBINPUT
    #define LV_LIBINPUT_BSD    @BR2_LV_LIBINPUT_BSD@

    /*Full keyboard support*/
    #define LV_LIBINPUT_XKB             @BR2_LV_LIBINPUT_XKB@
    #if LV_LIBINPUT_XKB
        /*"setxkbmap -query" can help find the right values for your keyboard*/
        #define LV_LIBINPUT_XKB_KEY_MAP { .rules = NULL, .model = "pc101", .layout = "us", .variant = NULL, .options = NULL }
    #endif
#endif

/* LVGL Windows backend */
#define LV_USE_WINDOWS    @BR2_LV_USE_WINDOWS@

/* Use OpenGL to open window on PC and handle mouse and keyboard */
#define LV_USE_OPENGLES   @BR2_LV_USE_OPENGLES@
#if LV_USE_OPENGLES
    #define LV_USE_OPENGLES_DEBUG        @BR2_LV_USE_OPENGLES_DEBUG@    /* Enable or disable debug for opengles */
#endif

#define LV_USE_RKADK      @BR2_LV_USE_RKADK@

/*==================
* EXAMPLES
*==================*/

/*Enable the examples to be built with the library*/
#define LV_BUILD_EXAMPLES @BR2_LV_BUILD_EXAMPLES@

/*===================
 * DEMO USAGE
 ====================*/

/*Show some widget. It might be required to increase `LV_MEM_SIZE` */
#define LV_USE_DEMO_WIDGETS @BR2_LV_USE_DEMO_WIDGETS@

/*Demonstrate the usage of encoder and keyboard*/
#define LV_USE_DEMO_KEYPAD_AND_ENCODER @BR2_LV_USE_DEMO_KEYPAD_AND_ENCODER@

/*Benchmark your system*/
#define LV_USE_DEMO_BENCHMARK @BR2_LV_USE_DEMO_BENCHMARK@

/*Render test for each primitives. Requires at least 480x272 display*/
#define LV_USE_DEMO_RENDER @BR2_LV_USE_DEMO_RENDER@

/*Stress test for LVGL*/
#define LV_USE_DEMO_STRESS @BR2_LV_USE_DEMO_STRESS@

/*Music player demo*/
#define LV_USE_DEMO_MUSIC @BR2_LV_USE_DEMO_MUSIC@
#if LV_USE_DEMO_MUSIC
    #define LV_DEMO_MUSIC_SQUARE    @BR2_LV_DEMO_MUSIC_SQUARE@
    #define LV_DEMO_MUSIC_LANDSCAPE @BR2_LV_DEMO_MUSIC_LANDSCAPE@
    #define LV_DEMO_MUSIC_ROUND     @BR2_LV_DEMO_MUSIC_ROUND@
    #define LV_DEMO_MUSIC_LARGE     @BR2_LV_DEMO_MUSIC_LARGE@
    #define LV_DEMO_MUSIC_AUTO_PLAY @BR2_LV_DEMO_MUSIC_AUTO_PLAY@
#endif

/*Flex layout demo*/
#define LV_USE_DEMO_FLEX_LAYOUT     @BR2_LV_USE_DEMO_FLEX_LAYOUT@

/*Smart-phone like multi-language demo*/
#define LV_USE_DEMO_MULTILANG       @BR2_LV_USE_DEMO_MULTILANG@

/*Widget transformation demo*/
#define LV_USE_DEMO_TRANSFORM       @BR2_LV_USE_DEMO_TRANSFORM@

/*Demonstrate scroll settings*/
#define LV_USE_DEMO_SCROLL          @BR2_LV_USE_DEMO_SCROLL@

/*Vector graphic demo*/
#define LV_USE_DEMO_VECTOR_GRAPHIC  @BR2_LV_USE_DEMO_VECTOR_GRAPHIC@
/*--END OF LV_CONF_H--*/

#endif /*LV_CONF_H*/

#endif /*End of "Content enable"*/
